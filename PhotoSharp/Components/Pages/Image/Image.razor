@page "/image/{ImageId:guid}"
@using Application.Albums
@using Application.Images
@using PhotoSharp.Components.Dialogs
@inject IImageService ImageService
@inject IAlbumService AlbumService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (_image is not null)
{
    <PageTitle>Image - @_image.Name</PageTitle>
    <div class="container mt-4">
        <h1 class="text-center">@_image.Name</h1>
        <div class="d-flex justify-content-center my-4">
            <img src="/api/images/@_image.Id" alt="@_image.Name" class="img-fluid rounded">
        </div>
        <div class="d-flex justify-content-center gap-3">
            <button class="btn btn-primary" @onclick="OpenChooseAlbumDialog">Add to Album</button>
            <button class="btn btn-danger" @onclick="DeleteImage">Delete</button>
            <a href="/api/images/@_image.Id" class="btn btn-success" download>Download</a>
        </div>
    </div>
    <AlbumChooserDialog IsOpen="@_isDialogOpen" IsOpenChanged="@(open => _isDialogOpen = open)" OnAlbumSelected="HandleAlbumSelected"></AlbumChooserDialog>
}

@code {
    [Parameter]
    public Guid ImageId { get; set; }
    private bool _isDialogOpen;
    private EF.Models.Models.Image? _image;

    protected async override Task OnInitializedAsync()
    {
        var image = await ImageService.GetImageAsync(ImageId);
        if (image is null)
        {
            NavigationManager.NavigateTo("/image");
            return;
        }
        _image = image;
    }

    private void OpenChooseAlbumDialog()
    {
        _isDialogOpen = true;
    }

    private void HandleAlbumSelected(Guid albumId)
    {
        AlbumService.AddImageToAlbumAsync(albumId, _image!.Id);
    }

    private async Task DeleteImage()
    {
        try
        {
            await ImageService.DeleteImageAsync(ImageId);
            NavigationManager.NavigateTo("/image");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}