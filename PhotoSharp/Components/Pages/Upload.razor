@page "/upload"
@using Application.Images
@rendermode InteractiveServer
@inject IImageService ImageService

<PageTitle>Upload</PageTitle>

<h1 class="title">Upload Images</h1>

<div class="upload-container">
    <InputFile OnChange="LoadFiles" multiple class="upload-input" accept="image/*"/>
    <div class="progress-container" style="display:@(_progressVisible ? "block" : "none")">
        <div class="progress-bar" style="width:@_progress%"></div>
    </div>
    <div class="file-list">
        @foreach (var fileName in _uploadedFiles)
        {
            <div class="file-item">@fileName</div>
        }
    </div>
</div>

@code {
    private readonly List<string> _uploadedFiles = [];
    private int _progress;
    private bool _progressVisible;
    private readonly List<string> _allowedImageTypes = ["image/jpeg", "image/png", "image/gif", "image/bmp", "image/webp"];

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(int.MaxValue); // explicitly set to int.MaxValue
        _progressVisible = true;
        _uploadedFiles.Clear();
        _progress = 0;

        var fileCount = files.Count;
        var processedCount = 0;

        foreach (var file in files)
        {
            if (_allowedImageTypes.Contains(file.ContentType))
            {
                await using var stream = file.OpenReadStream(long.MaxValue); // ensure large file size limit
                await ImageService.UploadImagesFromBrowserAsync(stream, file.Name, file.ContentType);
                _uploadedFiles.Add(file.Name);
            }

            processedCount++;
            _progress = (int)(processedCount / (double)fileCount * 100);
            StateHasChanged();
        }

        _progressVisible = false;
        StateHasChanged();
    }
}