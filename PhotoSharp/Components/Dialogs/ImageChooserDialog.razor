@using Application.Images
@inject IImageService ImageService
@if (IsOpen)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Choose @(MultiSelect ? "Images" : "Image")</h5>
                    <button type="button" class="close" @onclick="CloseDialog">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="d-flex flex-wrap">
                        @foreach (var image in _images)
                        {
                            var isSelected = _selectedImageIds.Contains(image.Id);
                            <div class="m-2" @onclick="() => ToggleImageSelection(image.Id)" style="border: @(isSelected ? "2px solid blue" : "none"); cursor: pointer;">
                                <img src="/api/images/@image.Id/thumbnail" alt="@image.Name" style="width: 100px; height: 100px;">
                            </div>
                        }
                    </div>
                    <div class="paging-buttons">
                        <button @onclick="PreviousPage" disabled="@(_currentPage == 0)">Previous</button>
                        <span>Page @(_currentPage + 1) of @(TotalPages)</span>
                        <button @onclick="NextPage" disabled="@(_currentPage == TotalPages - 1)">Next</button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="SubmitSelection">Select</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public bool MultiSelect { get; set; } = true;

    private List<EF.Models.Models.Image> _images = new();
    private HashSet<Guid> _selectedImageIds = new();

    [Parameter]
    public EventCallback<List<Guid>> OnImagesSelected { get; set; }

    private int _imageCount;
    private int _currentPage;
    private const int PageSize = 20;
    private int TotalPages => (_imageCount + PageSize - 1) / PageSize;

    private async Task CloseDialog()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    private void ToggleImageSelection(Guid imageId)
    {
        if (MultiSelect)
        {
            if (!_selectedImageIds.Add(imageId))
            {
                _selectedImageIds.Remove(imageId);
            }
        }
        else
        {
            if (_selectedImageIds.Contains(imageId))
            {
                _selectedImageIds.Remove(imageId);
            }
            else
            {
                _selectedImageIds.Clear();
                _selectedImageIds.Add(imageId);
            }
        }
    }

    private async Task SubmitSelection()
    {
        await OnImagesSelected.InvokeAsync(_selectedImageIds.ToList());
        await CloseDialog();
    }

    protected async override Task OnInitializedAsync()
    {
        await LoadImages();
    }

    private async Task LoadImages()
    {
        _images = await ImageService.GetImagesAsync(_currentPage, PageSize);
        _imageCount = await ImageService.GetImagesCountAsync();
    }

    private async Task NextPage()
    {
        if (_currentPage < TotalPages - 1)
        {
            _currentPage++;
            await LoadImages();
        }
    }

    private async Task PreviousPage()
    {
        if (_currentPage > 0)
        {
            _currentPage--;
            await LoadImages();
        }
    }
}